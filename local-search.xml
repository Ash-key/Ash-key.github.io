<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>二分查找</title>
    <link href="/2025/05/09/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2025/05/09/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<p>牛顿迭代法公式：</p><p>​$X_{n+1}&#x3D;x_n+F(x)&#x2F;F’(x)$</p><p>注意牛顿迭代法的公式是一个递推的公式，根据这个递推式，X<sub>n+1</sub>总是比$X_n$更接近$f(x)&#x3D;0$的解；牛顿迭代法是通过一阶泰勒展开得到的，不是通过两个极近的$X_n$和$X_n-1$使用导数定义式得到的</p><p>69</p><p>对题目 $f(x)&#x3D;x^2-a$,初始设置x&#x3D;a，从大到小迭代，这样第一次不满足条件$x^2&gt;a$的x就是目标结果</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>public:<br>    <span class="hljs-keyword">int</span> mySqrt(<span class="hljs-keyword">int</span> <span class="hljs-keyword">x</span>) &#123;<br>        long s=<span class="hljs-keyword">x</span>;<br>        <span class="hljs-keyword">while</span>(s*s&gt;<span class="hljs-keyword">x</span>)&#123;<br>            s=(s+<span class="hljs-keyword">x</span>/s)/<span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>除非显示的转换，临时变量的结果的类型与操作数相同，所以int类型的s，其结果s*s可能溢出</p><p>34</p><p>lower_bound:找到第一个不小于目标值的数</p><p>upper_bound:找到第一个大于目标值的数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">searchRange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> l=<span class="hljs-built_in">lower_bound</span>(nums,target);<br>        <span class="hljs-type">int</span> r=<span class="hljs-built_in">upper_bound</span>(nums,target)<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(l==nums.<span class="hljs-built_in">size</span>()||nums[l]!=target)&#123;<br>            <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>&#125;;<br>        &#125;<br>        <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;l,r&#125;;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lower_bound</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums,<span class="hljs-type">int</span> target)</span></span>&#123;<br>    <br>    <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=nums.<span class="hljs-built_in">size</span>(),m;<br>    <span class="hljs-keyword">while</span>(l&lt;r)&#123;<br>        m=(r+l)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(nums[m]&gt;=target)&#123; r=m;&#125;<br>        <span class="hljs-keyword">else</span> &#123;l=m<span class="hljs-number">+1</span>;&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">upper_bound</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums,<span class="hljs-type">int</span> target)</span></span>&#123;<br>    <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=nums.<span class="hljs-built_in">size</span>(),m;<br>    <span class="hljs-keyword">while</span>(l&lt;r)&#123;<br>        m=(l+r)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(nums[m]&gt;target)&#123;r=m;&#125;<br>        <span class="hljs-keyword">else</span>&#123;l=m<span class="hljs-number">+1</span>;&#125;    <br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>​</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法笔记_2024-4-30</title>
    <link href="/2025/04/30/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <url>/2025/04/30/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E5%8F%8C%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<p>c++语法补充：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> p=x;<br><span class="hljs-type">int</span> * p=&amp;x;<span class="hljs-comment">//指针和值都可以修改</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> * p=&amp;x;<span class="hljs-comment">//指针可以修改，值不可以修改</span><br><span class="hljs-type">int</span> * <span class="hljs-type">const</span> p=&amp;x;<span class="hljs-comment">//指针不可修改，值可以修改</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> * <span class="hljs-type">const</span> p=&amp;x;<span class="hljs-comment">//指针和值都不可修改</span><br></code></pre></td></tr></table></figure><p>记忆技巧，以int ** p* 为基准，const在int前-值不可修改；const在*后-值可以修改</p><p>指针函数与函数指针</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">指针函数：<span class="hljs-built_in">int</span>*<span class="hljs-keyword">func</span><span class="hljs-params">()</span>，一个返回类型是指针的函数<br>函数指针：指向函数的指针<br></code></pre></td></tr></table></figure><p>一个例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> * <span class="hljs-title">addition</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<span class="hljs-type">int</span>* sum=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(a+b);<span class="hljs-keyword">return</span> sum;&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">subtraction</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> a-b;&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operation</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span>(*func)(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>))</span></span>&#123;<span class="hljs-keyword">return</span> (*func)(a,b);&#125;<br><span class="hljs-built_in">int</span>(*minus)(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)=subtraction;<br><span class="hljs-type">int</span> *m=<span class="hljs-built_in">addition</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-type">int</span> n=<span class="hljs-built_in">operation</span>(<span class="hljs-number">3</span>,*m,minus);<br></code></pre></td></tr></table></figure><p>167</p><p>给定增序数组找二数，使得其和为给定的值，一切只有一对解</p><p>题目给的限制很多，所以才能用这种解法，从两边往中间移动，和大与目标则移动右边，和小于目标则移动左边</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; numbers, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> e=numbers.<span class="hljs-built_in">size</span>()<span class="hljs-number">+1</span>;<br>        <span class="hljs-type">int</span> s=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numbers.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">if</span>(numbers[s]+numbers[e]==target)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(numbers[s]+numbers[e]&lt;target)&#123;<br>                s++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(numbers[s]+numbers[e]&gt;target)&#123;<br>                e--;                <br>            &#125;<br>        &#125;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        ans.<span class="hljs-built_in">push_back</span>(s<span class="hljs-number">+1</span>);<br>        ans.<span class="hljs-built_in">push_back</span>(e<span class="hljs-number">+1</span>);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>88</p><p>合并两个有序数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, <span class="hljs-type">int</span> m, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> pos=m-- +n-- <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(m&gt;=<span class="hljs-number">0</span>&amp;&amp;n&gt;=<span class="hljs-number">0</span>)&#123;<br>        nums1[pos--]=nums1[m]&gt;nums2[n]?nums1[m--]:nums2[n--];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(n&gt;=<span class="hljs-number">0</span>)<br>        nums1[pos--]=nums2[n--];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>C++ vector使用insert在任意位置插入示例，注意在被插入位置原本的元素自动被挤到后面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;;<br><span class="hljs-keyword">auto</span> it = vec.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">2</span>;  <span class="hljs-comment">// 指向第3个位置（索引2）</span><br>vec.<span class="hljs-built_in">insert</span>(it, <span class="hljs-number">3</span>);          <span class="hljs-comment">// 插入元素3，vec变为 &#123;1, 2, 3, 4&#125;</span><br></code></pre></td></tr></table></figure><p>142</p><p>链表找环路问题</p><p>弗洛伊德判圈法（快慢指针）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        ListNode *fast=head,*slow=head;<br>        <span class="hljs-keyword">do</span>&#123;<br>            <span class="hljs-keyword">if</span>(!fast||!fast-&gt;next) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>            fast=fast-&gt;next-&gt;next;<br>            slow=slow-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(fast!=slow);<br>        fast=head;<br>        <span class="hljs-keyword">while</span>(fast!=slow)<br>        &#123;<br>            fast=fast-&gt;next;<br>            slow=slow-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fast;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>设走k步到入口，则k&#x3D;a+nb，a为起始节点到入口的距离，第一次相遇时利用二者步伐消去参量，得出slow走的步数为nb步，只要在让其走a步就可以到达入口，为了这个目标设计了让fast从头节点走a步到入口与b相遇的算法机制</p><p>76</p><p>滑动窗口求解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">minWindow</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">flags</span><span class="hljs-params">(<span class="hljs-number">128</span>,<span class="hljs-literal">false</span>)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">chars</span><span class="hljs-params">(<span class="hljs-number">128</span>,<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;t.<span class="hljs-built_in">size</span>();i++)&#123;<br>            flags[t[i]]=<span class="hljs-literal">true</span>;<br>            ++chars[t[i]];<br>        &#125;<br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<span class="hljs-comment">//how much the windows have covers t&#x27;s characters</span><br>        <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=<span class="hljs-number">0</span>,min_l=<span class="hljs-number">0</span>,min_size=s.<span class="hljs-built_in">size</span>()<span class="hljs-number">+1</span>;<span class="hljs-comment">//min_size=s.size()+1,means a impossible value</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> r=<span class="hljs-number">0</span>;r&lt;s.<span class="hljs-built_in">size</span>();r++)&#123;<br>            <span class="hljs-keyword">if</span>(flags[s[r]])&#123;<br>                <span class="hljs-keyword">if</span>(--chars[s[r]]&gt;=<span class="hljs-number">0</span>)<br>                cnt++;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(cnt==t.<span class="hljs-built_in">size</span>())&#123;<br>                <span class="hljs-keyword">if</span>(r-l<span class="hljs-number">+1</span>&lt;min_size)&#123;<br>                    min_l=l;<br>                    min_size=r-l<span class="hljs-number">+1</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(flags[s[l]]&amp;&amp;++chars[s[l]]&gt;<span class="hljs-number">0</span>)&#123;<br>                    cnt--;<br>                &#125;<br>                l++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> min_size&gt;s.<span class="hljs-built_in">size</span>()?<span class="hljs-string">&quot;&quot;</span>:s.<span class="hljs-built_in">substr</span>(min_l,min_size);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这个算法在窗口扩张时的设计很精妙，计数chars[]标识了当前T中的某一个字符缺少的数量，但是其值也可以是负数，标识出当前冗余出来的t中字符的数量，方便在窗口收缩时判断当前字符是否能收缩，即同时满足以下两种条件时收缩停止</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>当前左指针指向的字符在T中<br><span class="hljs-symbol">2 </span>当前的字符在chars记录中已经没有冗余，即++chars[s]&gt;<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>在完成一轮以下行为后</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>只移动右边指针直到包含所有t中字母<br><span class="hljs-symbol">2 </span>移动左指针直到得到当前最短字串<br><span class="hljs-symbol">3 </span>记录当前最短连续子串长度<br></code></pre></td></tr></table></figure><p>算法并不停止，而是继续在当前基础上移动右边指针指针，遍历完整个s字符串，找到所有符合要求的最短连续子串，短中取短得到解</p><p>tip：我应该追求使用更简单的数据结构，让思路上的障碍更少，如可以使用哈希表去重的地方就不要使用数组</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2025/04/16/test/"/>
    <url>/2025/04/16/test/</url>
    
    <content type="html"><![CDATA[<p>test</p><p>today is a good day </p><img src="/2025/04/16/test/%E6%9C%AA%E5%91%BD%E5%90%8D%E7%BB%98%E5%9B%BE.svg" class="" title="未命名绘图">]]></content>
    
    
    
    <tags>
      
      <tag>others</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
